# https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
# https://github.com/launchbadge/sqlx/blob/master/.github/workflows/sqlx.yml
# https://github.com/dh1tw/remoteAudio/blob/master/.github/workflows/build.yml
# https://github.com/actions-rs
# TODO: Set CRATE_NAME to match the project name
# TODO: Add `test` and more if you need to.
# TODO: Change bin to lib or both if you build a library
name: CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # matches v0.2, v1.0, v2.15.23, ect.
  pull_request:

jobs:
  lints:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Lints
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lints-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lints-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: clippy
          args: -- -D warnings

  check:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: CI Check
    runs-on: ubuntu-latest
    steps:
      - name: Set CRATE_NAME
        id: set_crate_name
        run: echo ::set-output name=CRATE_NAME::rtend

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-check-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --bin ${{ steps.set_crate_name.outputs.CRATE_NAME }} --locked

  create_release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: check
    name: Create release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    # since jobs can not share any variables we have to copy the URL of the created Github release
    # into a file and stash it as an artifact
    - name: Copy release URL into file
      run: |
        mkdir release
        printf "%s" "${{ steps.create_release.outputs.upload_url }}" > release/url.txt
    - uses: actions/upload-artifact@v1
      with:
        name: release-url
        path: ./release

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: create_release # this means check AND create_release succeeded
    name: Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        # Can also use this section to pass args depending on the running os, see 2nd link!
        # TODO: Change the name here
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: target/release/rtend
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            bin: target/release/rtend
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: target/release/rtend.exe
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            bin: target/release/rtend.exe
          - os: macOS-latest
            target: x86_64-apple-darwin
            bin: target/release/rtend

    steps:
      - name: Set CRATE_NAME
        id: set_crate_name
        run: echo ::set-output name=CRATE_NAME::rtend

      - name: Get VERSION
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-check-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # TODO: Change the name here
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin rtend --release --locked

      - uses: svenstaro/upx-action@2.0.1
        with:
          file: ${{ matrix.bin }}
          args: --best
          strip: true

      - uses: papeloto/action-zip@v1
        with:
          files: ${{ matrix.bin }}
          dest: ${{ steps.set_crate_name.outputs.CRATE_NAME }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target}}.zip
          recursive: false

      - name: Prepare artifact
        id: prepare_artifact
        run: |
          echo ::set-output name=ARTIFACT_PATH::./${{ steps.set_crate_name.outputs.CRATE_NAME }}-${{ steps.get_version.outputs.VERSION}}-${{ matrix.target }}.zip
          echo ::set-output name=ARTIFACT_NAME::${{ steps.set_crate_name.outputs.CRATE_NAME }}-${{ steps.get_version.outputs.VERSION}}-${{ matrix.target }}.zip

      - name: Retrieve stashed release URL
        uses: actions/download-artifact@v1
        with:
          name: release-url

      - name: Read release URL
        id: get_release_url
        uses: juliangruber/read-file-action@v1.0.0
        with:
          path: release-url/url.txt

      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.content }}
          asset_path: ${{ steps.prepare_artifact.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.prepare_artifact.outputs.ARTIFACT_NAME }}
          asset_content_type: application/x-7z-compressed
